name: Unit Tests

on:
  push:
  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  phpunit-ubuntu:
    name: Run Unit Tests on Ubuntu
    timeout-minutes: 30
    strategy:
      matrix:
        php-version:
          - 7.4
          - 8.0
          - 8.1
          - 8.2
          - 8.3
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript
      - name: Set up php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
      - uses: ramsey/composer-install@v2
      - name: Change ImageMagick security policy on Ubuntu
        run: |
          DQT='"'
          SRC="rights=${DQT}none${DQT} pattern=${DQT}PDF${DQT}"
          RPL="rights=${DQT}read|write${DQT} pattern=${DQT}PDF${DQT}"
          sudo sed -i "s/$SRC/$RPL/" /etc/ImageMagick-6/policy.xml
      - name: Unit testing with phpunit
        env:
          MINDEE_API_KEY: ${{ secrets.MINDEE_API_KEY_SE_TESTS }}
        run: |
          ./vendor/bin/phpunit -c tests/phpunit.xml

  phpunit-macos:
    name: Run Unit Tests on MacOS
    timeout-minutes: 30
    strategy:
      matrix:
        php-version:
          - 7.4
          - 8.0
          - 8.1
          - 8.2
          - 8.3
    runs-on: "macos-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        env:
          phpts: zts
        with:
          php-version: ${{ matrix.php-version }}
      - name: Install ImageMagick
        run: |
          brew update
          brew install imagemagick
          pecl install imagick
      - uses: ramsey/composer-install@v2
      - name: Unit testing with phpunit
        env:
          MINDEE_API_KEY: ${{ secrets.MINDEE_API_KEY_SE_TESTS }}
        run: |
          ./vendor/bin/phpunit -c tests/phpunit.xml

  phpunit-windows:
    name: Run Unit Tests on Windows
    timeout-minutes: 30
    strategy:
      matrix:
        php-version:
          - 7.4
          - 8.0
          - 8.1
          - 8.2
          - 8.3
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Ghostscript
        run: choco install ghostscript --version 9.56.1 -y
      - name: Create gs wrapper
        run: |
         @"
         @echo off
         "C:\Program Files\gs\gs10.03.1\bin\gswin64c.exe" %*
         "@ | Out-File -FilePath "C:\Windows\gs.bat" -Encoding ascii
        shell: powershell
      - name: Configure ImageMagick
        run: |
          $imagickConfigPath = (php -r "echo ini_get('imagick.configure_path');")
          $policyContent = @"
          <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE policymap [<!ELEMENT policymap (policy)+><!ELEMENT policy (#PCDATA)><!ATTLIST policy domain (delegate|coder|filter|path|resource) #IMPLIED><!ATTLIST policy name CDATA #IMPLIED><!ATTLIST policy rights CDATA #IMPLIED><!ATTLIST policy pattern CDATA #IMPLIED><!ATTLIST policy value CDATA #IMPLIED>]><policymap><policy domain="delegate" rights="read|write" pattern="gs" value="C:\Program Files (x86)\gs\gs10.03.1\bin\gswin32c.exe"/></policymap>
          "@
          $policyContent | Out-File -FilePath "$imagickConfigPath\policy.xml" -Encoding utf8 -Force
      - name: Verify ImageMagick Configuration
        run: |
          php -r "var_dump(class_exists('Imagick'));"
          php -r "var_dump(Imagick::queryFormats('PDF'));"
          php -r "$i = new Imagick(); var_dump($i->getVersion());"
          php -r "try { $i = new Imagick('test.pdf'); echo 'PDF support works'; } catch (Exception $e) { echo 'Error: ' . $e->getMessage(); }"
        shell: powershell
      - name: Set up php ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        env:
          phpts: zts
        with:
          php-version: ${{ matrix.php-version }}
          extensions: curl, fileinfo, json, imagick
      - uses: ramsey/composer-install@v2
      - name: Unit testing with phpunit
        env:
          MINDEE_API_KEY: ${{ secrets.MINDEE_API_KEY_SE_TESTS }}
        run: |
          ./vendor/bin/phpunit -c tests/phpunit.xml
